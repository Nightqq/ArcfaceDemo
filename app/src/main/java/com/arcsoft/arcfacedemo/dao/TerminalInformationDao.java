package com.arcsoft.arcfacedemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.arcsoft.arcfacedemo.dao.bean.TerminalInformation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TERMINAL_INFORMATION".
*/
public class TerminalInformationDao extends AbstractDao<TerminalInformation, Long> {

    public static final String TABLENAME = "TERMINAL_INFORMATION";

    /**
     * Properties of entity TerminalInformation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TerminalNum = new Property(1, String.class, "TerminalNum", false, "TERMINAL_NUM");
        public final static Property ServerIP = new Property(2, String.class, "ServerIP", false, "SERVER_IP");
        public final static Property ServerPost = new Property(3, String.class, "ServerPost", false, "SERVER_POST");
        public final static Property RecognitionThreshold = new Property(4, float.class, "RecognitionThreshold", false, "RECOGNITION_THRESHOLD");
        public final static Property OutTime = new Property(5, long.class, "OutTime", false, "OUT_TIME");
        public final static Property RecognitionNum = new Property(6, int.class, "RecognitionNum", false, "RECOGNITION_NUM");
        public final static Property SettingPassword = new Property(7, String.class, "SettingPassword", false, "SETTING_PASSWORD");
    }


    public TerminalInformationDao(DaoConfig config) {
        super(config);
    }
    
    public TerminalInformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TERMINAL_INFORMATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TERMINAL_NUM\" TEXT," + // 1: TerminalNum
                "\"SERVER_IP\" TEXT," + // 2: ServerIP
                "\"SERVER_POST\" TEXT," + // 3: ServerPost
                "\"RECOGNITION_THRESHOLD\" REAL NOT NULL ," + // 4: RecognitionThreshold
                "\"OUT_TIME\" INTEGER NOT NULL ," + // 5: OutTime
                "\"RECOGNITION_NUM\" INTEGER NOT NULL ," + // 6: RecognitionNum
                "\"SETTING_PASSWORD\" TEXT);"); // 7: SettingPassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TERMINAL_INFORMATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TerminalInformation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TerminalNum = entity.getTerminalNum();
        if (TerminalNum != null) {
            stmt.bindString(2, TerminalNum);
        }
 
        String ServerIP = entity.getServerIP();
        if (ServerIP != null) {
            stmt.bindString(3, ServerIP);
        }
 
        String ServerPost = entity.getServerPost();
        if (ServerPost != null) {
            stmt.bindString(4, ServerPost);
        }
        stmt.bindDouble(5, entity.getRecognitionThreshold());
        stmt.bindLong(6, entity.getOutTime());
        stmt.bindLong(7, entity.getRecognitionNum());
 
        String SettingPassword = entity.getSettingPassword();
        if (SettingPassword != null) {
            stmt.bindString(8, SettingPassword);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TerminalInformation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String TerminalNum = entity.getTerminalNum();
        if (TerminalNum != null) {
            stmt.bindString(2, TerminalNum);
        }
 
        String ServerIP = entity.getServerIP();
        if (ServerIP != null) {
            stmt.bindString(3, ServerIP);
        }
 
        String ServerPost = entity.getServerPost();
        if (ServerPost != null) {
            stmt.bindString(4, ServerPost);
        }
        stmt.bindDouble(5, entity.getRecognitionThreshold());
        stmt.bindLong(6, entity.getOutTime());
        stmt.bindLong(7, entity.getRecognitionNum());
 
        String SettingPassword = entity.getSettingPassword();
        if (SettingPassword != null) {
            stmt.bindString(8, SettingPassword);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TerminalInformation readEntity(Cursor cursor, int offset) {
        TerminalInformation entity = new TerminalInformation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TerminalNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ServerIP
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ServerPost
            cursor.getFloat(offset + 4), // RecognitionThreshold
            cursor.getLong(offset + 5), // OutTime
            cursor.getInt(offset + 6), // RecognitionNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // SettingPassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TerminalInformation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTerminalNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setServerIP(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setServerPost(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecognitionThreshold(cursor.getFloat(offset + 4));
        entity.setOutTime(cursor.getLong(offset + 5));
        entity.setRecognitionNum(cursor.getInt(offset + 6));
        entity.setSettingPassword(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TerminalInformation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TerminalInformation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TerminalInformation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
