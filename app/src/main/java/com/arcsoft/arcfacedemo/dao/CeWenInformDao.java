package com.arcsoft.arcfacedemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.arcsoft.arcfacedemo.dao.bean.CeWenInform;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CE_WEN_INFORM".
*/
public class CeWenInformDao extends AbstractDao<CeWenInform, String> {

    public static final String TABLENAME = "CE_WEN_INFORM";

    /**
     * Properties of entity CeWenInform.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ip = new Property(0, String.class, "ip", true, "IP");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Emp_id = new Property(2, String.class, "emp_id", false, "EMP_ID");
        public final static Property Temperature = new Property(3, String.class, "temperature", false, "TEMPERATURE");
        public final static Property Photo = new Property(4, String.class, "photo", false, "PHOTO");
        public final static Property State = new Property(5, String.class, "state", false, "STATE");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
    }


    public CeWenInformDao(DaoConfig config) {
        super(config);
    }
    
    public CeWenInformDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CE_WEN_INFORM\" (" + //
                "\"IP\" TEXT PRIMARY KEY NOT NULL ," + // 0: ip
                "\"NAME\" TEXT," + // 1: name
                "\"EMP_ID\" TEXT," + // 2: emp_id
                "\"TEMPERATURE\" TEXT," + // 3: temperature
                "\"PHOTO\" TEXT," + // 4: photo
                "\"STATE\" TEXT," + // 5: state
                "\"TIME\" TEXT);"); // 6: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CE_WEN_INFORM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CeWenInform entity) {
        stmt.clearBindings();
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(1, ip);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindString(3, emp_id);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(4, temperature);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(5, photo);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(6, state);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CeWenInform entity) {
        stmt.clearBindings();
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(1, ip);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindString(3, emp_id);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(4, temperature);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(5, photo);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(6, state);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CeWenInform readEntity(Cursor cursor, int offset) {
        CeWenInform entity = new CeWenInform( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ip
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // emp_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // temperature
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // photo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // state
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CeWenInform entity, int offset) {
        entity.setIp(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmp_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTemperature(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setState(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CeWenInform entity, long rowId) {
        return entity.getIp();
    }
    
    @Override
    public String getKey(CeWenInform entity) {
        if(entity != null) {
            return entity.getIp();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CeWenInform entity) {
        return entity.getIp() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
