package com.arcsoft.arcfacedemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.arcsoft.arcfacedemo.dao.bean.PrisonerFace;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRISONER_FACE".
*/
public class PrisonerFaceDao extends AbstractDao<PrisonerFace, String> {

    public static final String TABLENAME = "PRISONER_FACE";

    /**
     * Properties of entity PrisonerFace.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Emp_id = new Property(0, String.class, "emp_id", true, "EMP_ID");
        public final static Property Emp_name = new Property(1, String.class, "emp_name", false, "EMP_NAME");
        public final static Property Emp_feature = new Property(2, String.class, "emp_feature", false, "EMP_FEATURE");
        public final static Property Call_roll_result = new Property(3, int.class, "call_roll_result", false, "CALL_ROLL_RESULT");
        public final static Property Photo = new Property(4, String.class, "photo", false, "PHOTO");
    }


    public PrisonerFaceDao(DaoConfig config) {
        super(config);
    }
    
    public PrisonerFaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRISONER_FACE\" (" + //
                "\"EMP_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: emp_id
                "\"EMP_NAME\" TEXT," + // 1: emp_name
                "\"EMP_FEATURE\" TEXT," + // 2: emp_feature
                "\"CALL_ROLL_RESULT\" INTEGER NOT NULL ," + // 3: call_roll_result
                "\"PHOTO\" TEXT);"); // 4: photo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRISONER_FACE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrisonerFace entity) {
        stmt.clearBindings();
 
        String emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindString(1, emp_id);
        }
 
        String emp_name = entity.getEmp_name();
        if (emp_name != null) {
            stmt.bindString(2, emp_name);
        }
 
        String emp_feature = entity.getEmp_feature();
        if (emp_feature != null) {
            stmt.bindString(3, emp_feature);
        }
        stmt.bindLong(4, entity.getCall_roll_result());
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(5, photo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrisonerFace entity) {
        stmt.clearBindings();
 
        String emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindString(1, emp_id);
        }
 
        String emp_name = entity.getEmp_name();
        if (emp_name != null) {
            stmt.bindString(2, emp_name);
        }
 
        String emp_feature = entity.getEmp_feature();
        if (emp_feature != null) {
            stmt.bindString(3, emp_feature);
        }
        stmt.bindLong(4, entity.getCall_roll_result());
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(5, photo);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PrisonerFace readEntity(Cursor cursor, int offset) {
        PrisonerFace entity = new PrisonerFace( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // emp_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // emp_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // emp_feature
            cursor.getInt(offset + 3), // call_roll_result
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // photo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrisonerFace entity, int offset) {
        entity.setEmp_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEmp_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmp_feature(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCall_roll_result(cursor.getInt(offset + 3));
        entity.setPhoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PrisonerFace entity, long rowId) {
        return entity.getEmp_id();
    }
    
    @Override
    public String getKey(PrisonerFace entity) {
        if(entity != null) {
            return entity.getEmp_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrisonerFace entity) {
        return entity.getEmp_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
