package com.arcsoft.arcfacedemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.arcsoft.arcfacedemo.dao.bean.TemperatureSetting;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEMPERATURE_SETTING".
*/
public class TemperatureSettingDao extends AbstractDao<TemperatureSetting, Long> {

    public static final String TABLENAME = "TEMPERATURE_SETTING";

    /**
     * Properties of entity TemperatureSetting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Wen3035 = new Property(1, String.class, "wen3035", false, "WEN3035");
        public final static Property Wen3540 = new Property(2, String.class, "wen3540", false, "WEN3540");
        public final static Property Wen40 = new Property(3, String.class, "wen40", false, "WEN40");
        public final static Property Wenxia = new Property(4, String.class, "wenxia", false, "WENXIA");
        public final static Property Wenshang = new Property(5, String.class, "wenshang", false, "WENSHANG");
        public final static Property Cewenrizhi = new Property(6, boolean.class, "cewenrizhi", false, "CEWENRIZHI");
    }


    public TemperatureSettingDao(DaoConfig config) {
        super(config);
    }
    
    public TemperatureSettingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEMPERATURE_SETTING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WEN3035\" TEXT," + // 1: wen3035
                "\"WEN3540\" TEXT," + // 2: wen3540
                "\"WEN40\" TEXT," + // 3: wen40
                "\"WENXIA\" TEXT," + // 4: wenxia
                "\"WENSHANG\" TEXT," + // 5: wenshang
                "\"CEWENRIZHI\" INTEGER NOT NULL );"); // 6: cewenrizhi
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEMPERATURE_SETTING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TemperatureSetting entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wen3035 = entity.getWen3035();
        if (wen3035 != null) {
            stmt.bindString(2, wen3035);
        }
 
        String wen3540 = entity.getWen3540();
        if (wen3540 != null) {
            stmt.bindString(3, wen3540);
        }
 
        String wen40 = entity.getWen40();
        if (wen40 != null) {
            stmt.bindString(4, wen40);
        }
 
        String wenxia = entity.getWenxia();
        if (wenxia != null) {
            stmt.bindString(5, wenxia);
        }
 
        String wenshang = entity.getWenshang();
        if (wenshang != null) {
            stmt.bindString(6, wenshang);
        }
        stmt.bindLong(7, entity.getCewenrizhi() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TemperatureSetting entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wen3035 = entity.getWen3035();
        if (wen3035 != null) {
            stmt.bindString(2, wen3035);
        }
 
        String wen3540 = entity.getWen3540();
        if (wen3540 != null) {
            stmt.bindString(3, wen3540);
        }
 
        String wen40 = entity.getWen40();
        if (wen40 != null) {
            stmt.bindString(4, wen40);
        }
 
        String wenxia = entity.getWenxia();
        if (wenxia != null) {
            stmt.bindString(5, wenxia);
        }
 
        String wenshang = entity.getWenshang();
        if (wenshang != null) {
            stmt.bindString(6, wenshang);
        }
        stmt.bindLong(7, entity.getCewenrizhi() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TemperatureSetting readEntity(Cursor cursor, int offset) {
        TemperatureSetting entity = new TemperatureSetting( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // wen3035
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wen3540
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wen40
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wenxia
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // wenshang
            cursor.getShort(offset + 6) != 0 // cewenrizhi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TemperatureSetting entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWen3035(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWen3540(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWen40(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWenxia(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWenshang(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCewenrizhi(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TemperatureSetting entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TemperatureSetting entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TemperatureSetting entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
