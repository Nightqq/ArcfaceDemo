package com.arcsoft.arcfacedemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.arcsoft.arcfacedemo.dao.bean.PoliceFace;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POLICE_FACE".
*/
public class PoliceFaceDao extends AbstractDao<PoliceFace, String> {

    public static final String TABLENAME = "POLICE_FACE";

    /**
     * Properties of entity PoliceFace.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property EMP_ID = new Property(0, String.class, "EMP_ID", true, "EMP__ID");
        public final static Property EMP_NAME = new Property(1, String.class, "EMP_NAME", false, "EMP__NAME");
        public final static Property EMP_TYPE = new Property(2, int.class, "EMP_TYPE", false, "EMP__TYPE");
        public final static Property EMP_FEATURE = new Property(3, String.class, "EMP_FEATURE", false, "EMP__FEATURE");
        public final static Property VALID = new Property(4, int.class, "VALID", false, "VALID");
        public final static Property SFZ = new Property(5, String.class, "SFZ", false, "SFZ");
        public final static Property TQSJ = new Property(6, String.class, "TQSJ", false, "TQSJ");
        public final static Property TQZP = new Property(7, String.class, "TQZP", false, "TQZP");
    }


    public PoliceFaceDao(DaoConfig config) {
        super(config);
    }
    
    public PoliceFaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POLICE_FACE\" (" + //
                "\"EMP__ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: EMP_ID
                "\"EMP__NAME\" TEXT," + // 1: EMP_NAME
                "\"EMP__TYPE\" INTEGER NOT NULL ," + // 2: EMP_TYPE
                "\"EMP__FEATURE\" TEXT," + // 3: EMP_FEATURE
                "\"VALID\" INTEGER NOT NULL ," + // 4: VALID
                "\"SFZ\" TEXT," + // 5: SFZ
                "\"TQSJ\" TEXT," + // 6: TQSJ
                "\"TQZP\" TEXT);"); // 7: TQZP
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POLICE_FACE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PoliceFace entity) {
        stmt.clearBindings();
 
        String EMP_ID = entity.getEMP_ID();
        if (EMP_ID != null) {
            stmt.bindString(1, EMP_ID);
        }
 
        String EMP_NAME = entity.getEMP_NAME();
        if (EMP_NAME != null) {
            stmt.bindString(2, EMP_NAME);
        }
        stmt.bindLong(3, entity.getEMP_TYPE());
 
        String EMP_FEATURE = entity.getEMP_FEATURE();
        if (EMP_FEATURE != null) {
            stmt.bindString(4, EMP_FEATURE);
        }
        stmt.bindLong(5, entity.getVALID());
 
        String SFZ = entity.getSFZ();
        if (SFZ != null) {
            stmt.bindString(6, SFZ);
        }
 
        String TQSJ = entity.getTQSJ();
        if (TQSJ != null) {
            stmt.bindString(7, TQSJ);
        }
 
        String TQZP = entity.getTQZP();
        if (TQZP != null) {
            stmt.bindString(8, TQZP);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PoliceFace entity) {
        stmt.clearBindings();
 
        String EMP_ID = entity.getEMP_ID();
        if (EMP_ID != null) {
            stmt.bindString(1, EMP_ID);
        }
 
        String EMP_NAME = entity.getEMP_NAME();
        if (EMP_NAME != null) {
            stmt.bindString(2, EMP_NAME);
        }
        stmt.bindLong(3, entity.getEMP_TYPE());
 
        String EMP_FEATURE = entity.getEMP_FEATURE();
        if (EMP_FEATURE != null) {
            stmt.bindString(4, EMP_FEATURE);
        }
        stmt.bindLong(5, entity.getVALID());
 
        String SFZ = entity.getSFZ();
        if (SFZ != null) {
            stmt.bindString(6, SFZ);
        }
 
        String TQSJ = entity.getTQSJ();
        if (TQSJ != null) {
            stmt.bindString(7, TQSJ);
        }
 
        String TQZP = entity.getTQZP();
        if (TQZP != null) {
            stmt.bindString(8, TQZP);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PoliceFace readEntity(Cursor cursor, int offset) {
        PoliceFace entity = new PoliceFace( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // EMP_ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // EMP_NAME
            cursor.getInt(offset + 2), // EMP_TYPE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EMP_FEATURE
            cursor.getInt(offset + 4), // VALID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SFZ
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // TQSJ
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // TQZP
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PoliceFace entity, int offset) {
        entity.setEMP_ID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEMP_NAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEMP_TYPE(cursor.getInt(offset + 2));
        entity.setEMP_FEATURE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVALID(cursor.getInt(offset + 4));
        entity.setSFZ(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTQSJ(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTQZP(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PoliceFace entity, long rowId) {
        return entity.getEMP_ID();
    }
    
    @Override
    public String getKey(PoliceFace entity) {
        if(entity != null) {
            return entity.getEMP_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PoliceFace entity) {
        return entity.getEMP_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
